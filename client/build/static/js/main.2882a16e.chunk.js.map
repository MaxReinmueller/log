{"version":3,"sources":["utils/API.js","components/Form/Input.js","components/Form/FormBtn.js","components/List/List.js","components/List/ListItem.js","pages/Books.js","pages/Detail.js","components/Nav/Nav.js","App.js","serviceWorker.js","index.js"],"names":["axios","get","id","delete","bookData","post","Input","props","className","FormBtn","style","float","marginBottom","children","List","ListItem","Books","state","books","title","author","loadBooks","API","then","res","setState","data","catch","err","console","log","deleteBook","handleInputChange","event","target","name","value","handleFormSubmit","preventDefault","this","Container","fluid","Row","Col","size","Jumbotron","onChange","placeholder","disabled","onClick","length","map","book","key","_id","to","Button","Component","Detail","match","params","Nav","href","App","exact","path","component","Boolean","window","location","hostname","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","error","message"],"mappings":"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","file":"static/js/main.2882a16e.chunk.js","sourcesContent":["import axios from 'axios';\r\n\r\nexport default {\r\n\t// Gets all books\r\n\tgetBooks: function() {\r\n\t\treturn axios.get('/api/books');\r\n\t},\r\n\t// Gets the book with the given id\r\n\tgetBook: function(id) {\r\n\t\treturn axios.get('/api/books/' + id);\r\n\t},\r\n\t// Deletes the book with the given id\r\n\tdeleteBook: function(id) {\r\n\t\treturn axios.delete('/api/books/' + id);\r\n\t},\r\n\t// Saves a book to the database\r\n\tsaveBook: function(bookData) {\r\n\t\treturn axios.post('/api/books', bookData);\r\n\t}\r\n};","import React from \"react\";\r\n\r\nexport const Input = props => (\r\n  <div className=\"form-group\">\r\n    <input className=\"form-control\" {...props} />\r\n  </div>\r\n);","import React from \"react\";\r\n\r\nexport const FormBtn = props => (\r\n  <button {...props} style={{ float: \"right\", marginBottom: 10 }} className=\"btn btn-success\">\r\n    {props.children}\r\n  </button>\r\n);\r\n","import React from \"react\";\r\nimport \"./List.css\";\r\n\r\nexport const List = ({ children }) => {\r\n  return (\r\n    <div className=\"list-overflow-container\">\r\n      <ul className=\"list-group\">\r\n        {children}\r\n      </ul>\r\n    </div>\r\n  );\r\n};","import React from \"react\";\r\n\r\nexport const ListItem = props => (\r\n  <li className=\"list-group-item\">\r\n    {props.children}\r\n  </li>\r\n);","import React, { Component } from 'react';\r\nimport { Col, Row, Container, Jumbotron, Button} from 'reactstrap'\r\nimport API from '../utils/API';\r\nimport { Link } from 'react-router-dom';\r\nimport { Input, FormBtn } from '../components/Form';\r\nimport { List, ListItem } from '../components/List'\r\n\r\nclass Books extends Component {\r\n\tstate = {\r\n\t\tbooks: [],\r\n\t\ttitle: '',\r\n\t\tauthor: ''\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tthis.loadBooks();\r\n\t}\r\n\r\n\tloadBooks = () => {\r\n\t\tAPI.getBooks()\r\n\t\t\t.then(res => this.setState({ books: res.data, title: '', author: '' }))\r\n\t\t\t.catch(err => console.log(err));\r\n\t};\r\n\r\n\tdeleteBook = id => {\r\n\t\tAPI.deleteBook(id)\r\n\t\t\t.then(res => this.loadBooks())\r\n\t\t\t.catch(err => console.log(err));\r\n\t};\r\n\r\n\thandleInputChange = event => {\r\n\t\tconst { name, value } = event.target;\r\n\t\tthis.setState({\r\n\t\t\t[name]: value\r\n\t\t});\r\n\t};\r\n\r\n\thandleFormSubmit = event => {\r\n\t\tevent.preventDefault();\r\n\t\tif (this.state.title && this.state.author) {\r\n\t\t\tAPI.saveBook({\r\n\t\t\t\ttitle: this.state.title,\r\n\t\t\t\tauthor: this.state.author\r\n\t\t\t})\r\n\t\t\t\t.then(res => this.loadBooks())\r\n\t\t\t\t.catch(err => console.log(err));\r\n\t\t}\r\n\t};\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container fluid>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col size=\"md-6\">\r\n\t\t\t\t\t\t<Jumbotron>\r\n\t\t\t\t\t\t\t<h1>What Books Should I Read?</h1>\r\n\t\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t\t\t<form>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\tvalue={this.state.title}\r\n\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\t\tname=\"title\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Title (required)\"\r\n\t\t\t\t\t\t\t/>\r\n\t\t\t\t\t\t\t<Input\r\n\t\t\t\t\t\t\t\tvalue={this.state.author}\r\n\t\t\t\t\t\t\t\tonChange={this.handleInputChange}\r\n\t\t\t\t\t\t\t\tname=\"author\"\r\n\t\t\t\t\t\t\t\tplaceholder=\"Author (required)\"\r\n\t\t\t\t\t\t\t/>\r\n\r\n\t\t\t\t\t\t\t<FormBtn\r\n\t\t\t\t\t\t\t\tdisabled={!(this.state.author && this.state.title)}\r\n\t\t\t\t\t\t\t\tonClick={this.handleFormSubmit}\r\n\t\t\t\t\t\t\t>\r\n\t\t\t\t\t\t\t\tSubmit Book\r\n\t\t\t\t\t\t\t</FormBtn>\r\n\t\t\t\t\t\t</form>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t\t<Col size=\"md-6 sm-12\">\r\n\t\t\t\t\t\t<Jumbotron>\r\n\t\t\t\t\t\t\t<h1>Books On My List</h1>\r\n\t\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t\t\t{this.state.books.length ? (\r\n\t\t\t\t\t\t\t<List>\r\n\t\t\t\t\t\t\t\t{this.state.books.map(book => (\r\n\t\t\t\t\t\t\t\t\t<ListItem key={book._id}>\r\n\t\t\t\t\t\t\t\t\t\t<Link to={'/books/' + book._id}>\r\n\t\t\t\t\t\t\t\t\t\t\t<strong>\r\n\t\t\t\t\t\t\t\t\t\t\t\t{book.title} by {book.author}\r\n\t\t\t\t\t\t\t\t\t\t\t</strong>\r\n\t\t\t\t\t\t\t\t\t\t</Link>\r\n\t\t\t\t\t\t\t\t\t\t<Button onClick={() => this.deleteBook(book._id)} />\r\n\t\t\t\t\t\t\t\t\t</ListItem>\r\n\t\t\t\t\t\t\t\t))}\r\n\t\t\t\t\t\t\t</List>\r\n\t\t\t\t\t\t) : (\r\n\t\t\t\t\t\t\t<h3>No Results to Display</h3>\r\n\t\t\t\t\t\t)}\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Books;","import React, { Component } from 'react';\r\nimport { Link } from 'react-router-dom';\r\nimport { Col, Row, Container, Jumbotron } from 'reactstrap'\r\nimport API from '../utils/API';\r\n\r\nclass Detail extends Component {\r\n\tstate = {\r\n\t\tbook: {}\r\n\t};\r\n\r\n\tcomponentDidMount() {\r\n\t\tAPI.getBook(this.props.match.params.id)\r\n\t\t\t.then(res => this.setState({ book: res.data }))\r\n\t\t\t.catch(err => console.log(err));\r\n\t}\r\n\r\n\trender() {\r\n\t\treturn (\r\n\t\t\t<Container fluid>\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col size=\"md-12\">\r\n\t\t\t\t\t\t<Jumbotron>\r\n\t\t\t\t\t\t\t<h1>\r\n\t\t\t\t\t\t\t\t{this.state.book.title} by {this.state.book.author}\r\n\t\t\t\t\t\t\t</h1>\r\n\t\t\t\t\t\t</Jumbotron>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\r\n\t\t\t\t<Row>\r\n\t\t\t\t\t<Col size=\"md-2\">\r\n\t\t\t\t\t\t<Link to=\"/\">‚Üê Back to Authors</Link>\r\n\t\t\t\t\t</Col>\r\n\t\t\t\t</Row>\r\n\t\t\t</Container>\r\n\t\t);\r\n\t}\r\n}\r\n\r\nexport default Detail;","import React from 'react';\r\n\r\nconst Nav = () => (\r\n\t<nav className=\"navbar navbar-inverse navbar-top\">\r\n\t\t<div className=\"container-fluid\">\r\n\t\t\t<div className=\"navbar-header\">\r\n\t\t\t\t<a href=\"/\" className=\"navbar-brand\">\r\n\t\t\t\t\tReact Reading List\r\n\t\t\t\t</a>\r\n\t\t\t</div>\r\n\t\t</div>\r\n\t</nav>\r\n);\r\n\r\nexport default Nav;","\nimport React from 'react';\nimport { BrowserRouter as Router, Route, Switch } from 'react-router-dom';\nimport Books from './pages/Books';\nimport Detail from './pages/Detail';\n// import NoMatch from './pages/NoMatch';\nimport Nav from './components/Nav';\n\nconst App = () => (\n\t<Router>\n\t\t<div>\n\t\t\t<Nav />\n\t\t\t<Switch>\n\t\t\t\t<Route exact path=\"/\" component={Books} />\n\t\t\t\t<Route exact path=\"/books\" component={Books} />\n\t\t\t\t<Route exact path=\"/books/:id\" component={Detail} />\n\t\t\t\t{/* <Route component={NoMatch} /> */}\n\t\t\t</Switch>\n\t\t</div>\n\t</Router>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}